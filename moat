#!/usr/bin/perl

# moat - mother of all (driver) tests
# John Jacobsen, NPX Designs, Inc., jacobsen\@npxdesigns.com
# Started: Fri Aug 13 08:38:05 2004

my $Id = "Id"; my $id = "$Id: moat,v 1.25 2006-09-22 20:51:03 jacobsen Exp $x";

package MY_PACKAGE;
use strict;
use Getopt::Long;
use Fcntl;

sub off_all; sub on_all;
sub check_for_running_processes; sub kill_running_processes;

my $relsecs    = 120; # 2 min
my $cbsecs     = 120; # 2 min
my $savtsecs   = 120; # 2 min
my $domappsecs = 120; # 2 min
my $mjbhrs     = 6;   # Default is 6 hrs MJB
my $nboot      = 0;
my $skipmjb;
my $uppermjb;
my $lowermjb;
my $fixsingle;
my $loopback;
my $skipkbchk = 0;
my $skipoff   = 0;

sub usage { return <<EOF;
Usage: $0  [<dom>] ....         <dom> is e.g., 00a.  Repeatable.
           [-h|-help]           Show these options
	   [-n <N>]             Number of times to perform all tests (default=1)
	   [-d|-dorfreq <MHz>]  Specify DOR clock frequency
	   [-g|-testgps]        Test GPS functions as part of stagedtests (10 MHz only!)
	   [-f|-fixsingle]      Single packet length for stagedtests initial
	                        echo test (default: random)
	   [-X]                 Skip check on prompt for iceboot (for loopback firmware)
	   [-i|-skipkbchk]      Skip check on minimum bandwidth
	   [-k|-kill]           Kill all test processes
           [-w]                 Perform echotests using readwrite (default: echo-test)
	   [-c|-cbsecs]         Number of seconds for configboot stagedtests runs 
	                        (default $cbsecs)
	   [-r|-relsecs]        Number of seconds for "release" stagedtests run
	                        versus stf.sbi (default $relsecs)
	   [-t|-savetsecs]      Number of seconds for same, saving tcal data
	                        (default $savtsecs)
	   [-a|-domappsecs]     Number of seconds for "release" stagedtests runs
	                        versus domapp.sbi (default $domappsecs)
	   [-b <Nt>]            Perform cold reboot test on selected DOMs <Nt> times
                                (WARNING: POWER CYCLES ALL DOMS EACH Nt TIME!!!)
           [-o]                 Skip "off all" if cold reboot test fails
           [-v]                 Show MOAT release version

           [-s|-skipmjb]        Skip MJB test 
	   [-u]                 Run MJB on upper DOMs only
           [-l]                 Run MJB on lower DOMs only

                                Either -s, -u or -l must be given, 
                                or MJB may fail on large numbers of DOMs.


EOF
;
	}

my $help;
my $dorfreq;
my $testgps;
my $kill;
my $useReadwrite = 0;
my $n = 1;
my @exclude;
my $showversion;

GetOptions("help|h"          => \$help,
	   "skipmjb|s"       => \$skipmjb,
	   "u"               => \$uppermjb,
	   "l"               => \$lowermjb,
           "dorfreq|d=i"     => \$dorfreq,
	   "relsecs|r=i"     => \$relsecs,
	   "cbsecs|c=i"      => \$cbsecs,
	   "testgps|g"       => \$testgps,
	   "exclude|e=s"     => \@exclude,
	   "savetsecs|t=i"   => \$savtsecs,
	   "fixsingle|f=i"   => \$fixsingle,
	   "w"               => \$useReadwrite,
	   "X"               => \$loopback,
	   "skipkbchk|i"     => \$skipkbchk,
	   "domappsecs|a=i"  => \$domappsecs,
	   "kill|k"          => \$kill,
	   "v"               => \$showversion,
	   "o"               => \$skipoff,
	   "b=i"             => \$nboot,
	   "n=i"             => \$n) || die usage;

die usage if $help;

if($showversion) {
    print "MOAT release version ".`cat /usr/local/share/moat-version`;
    exit;
}

$loopback = 1 if defined $loopback;


my @doms = @ARGV;
my $cmdline_doms = scalar @doms;

my $fsarg = (defined $fixsingle) ? "-f $fixsingle" : "";

print "Welcome to $0 by jacobsen\@npxdesigns.com.\n";

if($kill) {
    kill_running_processes;
    exit;
}

check_for_running_processes;

if($loopback && ($cbsecs !=0 || $savtsecs !=0)) {
    die "Tcalib operations not supported w/ loopback firmware.\n"
	."Use -r (release) test with loopback.\n";
}

while(!defined $dorfreq) {
    print "Enter clock frequency (10 or 20) in Mhz: ";
    $dorfreq = <STDIN>; chomp $dorfreq;
    last if $dorfreq == 10 || $dorfreq == 20;
}

die "GPS can only be run w/ 10MHz clock speed!\n".usage if($testgps && $dorfreq != 10);
my $gpsflag = $testgps ? "-g" : "";

if(defined @exclude) {
    print "Exclude not implemented yet, sorry.\n\n";
    die usage;
}

my ($sec,$min,$hr,$mday,$mon,$yr,$wday,$yday,$isdst) = localtime;
$yr += 1900;
$mon++;
my $ts = sprintf("$yr-%02d-%02d__%02d:%02d:%02d", $mon, $mday, $hr, $min, $sec);
my $testdir = "MOAT__$ts";
my $logfile = "MOAT.out";
my $versionfile = "version";

print "Creating $testdir... ";
mkdir $testdir || die "Can't create $testdir: $!\n";
print "OK.\n";
print "Creating symlink latest_moat to $testdir... ";
if(-e "latest_moat") {
    unlink "latest_moat" || die "Can't unlink existing latest_moat: $!\n";
}
symlink($testdir, "latest_moat")
    || die "Can't symlink $testdir"."->latest_moat: $!.\n";

chdir $testdir || die "Can't chdir $testdir: $!\n";

open LOG, ">$logfile" || die "Can't open $logfile: $!\n";
my $ofh = select(LOG); $| = 1; select $ofh;
sub mydie { my $m = shift; print LOG $m; die $m; }
print "\nResults to appear in directory $testdir\n\n";

open VERSION, ">$versionfile" || die "Can't open $versionfile: $!\n";
print VERSION `/usr/local/bin/domhub-version 2>&1`;
close VERSION;

my $st_in;
if(@doms) {
    for(@doms) {
	tr/[a-z]/[A-Z]/;
	if(/(\d)(\d)(\S)/) {
	    $st_in .= "$1 $2 $3\n";
	}
    }
    $st_in .= "DONE\n";
}

my $dom_list = join ' ', @doms;

exit if fork;

print LOG "MOAT: Started at ".(scalar localtime)."\n";
print LOG "      CVS $id\n";

my $have_failure = 0;

my $moat_top = `pwd`; chomp $moat_top;

for(my $iter=0; $iter<$n; $iter++) {
    print LOG "\n\nMOAT test iteration $iter...\n";
    my $iterd = sprintf("test%03d",$iter);
    mkdir $iterd || mydie "Can't mkdir $iterd: $!\n";
    chdir $iterd || mydie "Can't chdir $iterd: $!\n";

    $iterd = `pwd`; chomp $iterd; # fully qualify to return here

    if($cbsecs > 0) {
	#### stagedtests (echo test) of configboot 
	my $cbet = "configboot_echotest";
	mkdir $cbet || mydie "Can't mkdir $cbet: $!\n";
	chdir $cbet || mydie "Can't chdir $cbet: $!\n";
	unlink "st.out" || mydie "Can't unlink st.out: $!\n";
	open ST, ">st.in"; print ST $st_in; close ST;
	my $stcmd = "/usr/local/bin/stagedtests.pl -b -t $cbsecs -x -d $dorfreq $fsarg "
	    ."$gpsflag -s ".(defined $st_in ? "st.in" : "-p").($loopback?" -X":"")
	    .($skipkbchk?" -i":"").($useReadwrite?" -w":"");
	print LOG "\n\nMOAT: Starting $stcmd\n";
	system "$stcmd 2>&1 > st.out";
	my $stresult = `tail -1 st.out`;
	print LOG $stresult;
	chdir $iterd;
	if($stresult !~ /SUCCESS/) {
	    print LOG "\n\nStagedtests/echo test with configboot firmware FAILED".
		" on trial $iter.\n";
	    $have_failure = 1;
	    chdir $moat_top;
	    last;
	}
    }

    if($savtsecs > 0) {
	#### stagedtests of domapp firmware, saving tcalib data
	my $rest = "save_tcal_stagedtests";
	mkdir $rest || mydie "Can't mkdir $rest: $!\n";
	chdir $rest || mydie "Can't chdir $rest: $!\n";
	unlink "st.out" || mydie "Can't unlink st.out: $!\n";
        open ST, ">st.in"; print ST $st_in; close ST;
	my $stcmd = "/usr/local/bin/stagedtests.pl -t $savtsecs -a -v -d $dorfreq $fsarg $gpsflag "
	    .(defined $st_in ? "st.in" : "-p").($loopback?" -X":"").($skipkbchk?" -i":"")
	    .($useReadwrite?" -w":"")." -a";
	print LOG "\n\nMOAT: Starting $stcmd\n";
	system "$stcmd 2>&1 > st.out";
	my $stresult = `tail -1 st.out`;
	print LOG $stresult;
	chdir $iterd;
	if($stresult !~ /SUCCESS/) {
	    print LOG "\n\nStagedtests (echo+tcal) FAILED on iteration $iter.\n";
	    $have_failure = 1;
	    chdir $moat_top;
	    last;
	}
    }

    if($relsecs > 0) {
	#### stagedtests (echo test + tcaltest) of iceboot firmware
	my $rest = "release_stagedtests";
	mkdir $rest || mydie "Can't mkdir $rest: $!\n";
	chdir $rest || mydie "Can't chdir $rest: $!\n";
	unlink "st.out" || mydie "Can't unlink st.out: $!\n";
        open ST, ">st.in"; print ST $st_in; close ST;
	my $stcmd = "/usr/local/bin/stagedtests.pl -t $relsecs -d $dorfreq $fsarg $gpsflag "
	    .(defined $st_in ? "st.in" : "-p").($loopback?" -x -X":"").($skipkbchk?" -i":"")
	    .($useReadwrite?" -w":"");
	print LOG "\n\nMOAT: Starting $stcmd\n";
	system "$stcmd 2>&1 > st.out";
	my $stresult = `tail -1 st.out`;
	print LOG $stresult;
	chdir $iterd;
	if($stresult !~ /SUCCESS/) {
	    print LOG "\n\nStagedtests (echo+tcal) FAILED on iteration $iter.\n";
	    $have_failure = 1;
	    chdir $moat_top;
	    last;
	}
    }

    if($domappsecs > 0) {
	#### stagedtests (echo test + tcaltest) of domapp firmware
	my $rest = "domapp_stagedtests";
	mkdir $rest || mydie "Can't mkdir $rest: $!\n";
        chdir $rest || mydie "Can't chdir $rest: $!\n";
        unlink "st.out" || mydie "Can't unlink st.out: $!\n";
        open ST, ">st.in"; print ST $st_in; close ST;
	my $stcmd = "/usr/local/bin/stagedtests.pl -t $domappsecs -d $dorfreq $fsarg $gpsflag -a "
            .(defined $st_in ? "st.in" : "-p").($loopback?" -x -X":"").($skipkbchk?" -i":"")
            .($useReadwrite?" -w":"");
        print LOG "\n\nMOAT: Starting $stcmd\n";
        system "$stcmd 2>&1 > st.out";
        my $stresult = `tail -1 st.out`;
        print LOG $stresult;
	chdir $iterd;
        if($stresult !~ /SUCCESS/) {
            print LOG "\n\nStagedtests (echo+tcal) FAILED on iteration $iter.\n";
            $have_failure = 1;
	    chdir $moat_top;
            last;
        }
    }

    if($nboot > 0) {
	off_all;
	my $crbd = "reboot_tests";
	mkdir $crbd || mydie "Can't mkdir $crbd: $!\n";
	chdir $crbd || mydie "Can't chdir $crbd: $!\n";
	print LOG "\n\nMOAT: Starting cold reboot tests...\n";
	my $bootlog = "boottests.log";
	if(do_cold_reboot_test($nboot, $bootlog, @doms)) {
	    print LOG "\n\nCold reboot tests FAILED.\n";
	    $have_failure = 1;
	    chdir $moat_top;
	    last;
	}
	chdir $iterd;
    }

    if(!$skipmjb) {
	my $wd = `pwd`; chomp $wd;
	my $mjbdir = "mjb";
	mkdir $mjbdir || mydie "Can't mkdir $mjbdir: $!\n";
	chdir $mjbdir || mydie "Can't chdir $mjbdir: $!\n";
	print LOG "\n\nMOAT: Starting mjb...\n";
	my $mjb_results_dir = `pwd`; chomp $mjb_results_dir;
	my $mjb_results = "$mjb_results_dir/mjb_results.dat";
	my $mjb_stderr  = "$mjb_results_dir/mjb_stderr.dat";
	off_all;
	on_all;
	# Make sure all requested DOMs communicate
	my %iscom;
	my $domarg;
	my $have_communicating;
	my $find_doms = ((scalar @doms)==0) ? 1 : 0;
	foreach my $pf (</proc/driver/domhub/card?/pair?/dom?/is-communicating>) {
	    if(`cat $pf` =~ /is communicating/) {
		if($pf =~ m|/proc/driver/domhub/card(\d+)/pair(\d+)/dom(\w+)/is-communicating|) {
		    $iscom{"$1$2$3"} = 1;
		    $have_communicating++;
		    push @doms, "$1$2$3";
		}
	    }
	}
	if(!$have_communicating) {
	    print LOG "No DOMs communicating - won't start MJB.\n";
	    print LOG "(Pre-)MJB FAILED on iteration $iter.\n";
	    $have_failure = 1;
	    chdir $moat_top;
	    last;
	}
	my $had_uncommunicative = 0;
	foreach my $dom (@doms) {
	    $dom =~ tr/[a-z]/[A-Z]/;
	    my $card;
	    if($dom =~ /(\d+)\d+\w+/) {
		$card = $1;
	    } else {
		print LOG "Internal error, $dom not in CWD format.\n";
		last;
	    }
	    if($iscom{$dom}) {
		if($uppermjb && $card > 3) {
		    next;
		}
		if($lowermjb && $card < 4) {
		    next;
		}
		$domarg .= "$dom ";
	    } else {
		print LOG "$dom is NOT communicating!\n";
		$had_uncommunicative++;
		last;
	    }
	}
	if($had_uncommunicative) {
	    print LOG "At least one requested DOM uncommunicative - won't start MJB.\n";
	    $have_failure = 1;
	    chdir $moat_top;
	    last;
	}
	chdir "/usr/local/share/domhub-testing";
	system "echo 0 > /proc/driver/domhub/verbose";
	if($domarg eq "") {
	    print LOG "No communicating DOMs found in the region requested.\n";
	    $have_failure = 1;
            chdir $moat_top;
	    last;
	} 
	system("./mjb.sh -h $mjbhrs $domarg 2> $mjb_stderr > $mjb_results");
	off_all;
	system "./results-qry.sh $mjb_results all >& $mjb_results_dir/mjb.out";
	system "echo 1 > /proc/driver/domhub/verbose";
	chdir $mjb_results_dir;
	my $mjbresult = `cat mjb.out`;
	print LOG $mjbresult;
	chdir $iterd;
	if($mjbresult =~ /FAIL/) {
	    print LOG "\n\nmjb FAILED on iteration $iter.\n";
	    $have_failure = 1;
	    chdir $moat_top;
	    last;
	}
    }

    #### Done with tests this iteration
    chdir $moat_top;

    print LOG "MOAT: Test iteration $iter succeeded.\n";
}

print LOG "MOAT: Powering off all DOMs.\n";
off_all unless $skipoff;

my $now = scalar localtime;
if($have_failure) {
    print LOG "\n\n\nMOAT: Tests ended with FAILURE at $now.\n";
    open (FAIL, ">$moat_top/FAIL") or mydie "Can't open status file $moat_top/FAIL: $!\n";
    print FAIL " ";
    close FAIL;
} else {
    print LOG "\n\n\nMOAT: Tests ended SUCCESSFULLY at $now.\n";
    open (SUCC, ">$moat_top/SUCCESS") or mydie "Can't open status file $moat_top/SUCCESS: $!\n";
    print SUCC " ";
    close SUCC;
}

exit;

sub off_all {
    system "echo off > /proc/driver/domhub/pwrall";
}

sub on_all {
    system "echo on > /proc/driver/domhub/pwrall";
}

sub have_running_processes {
    my @haveEm;
    my @ps = `ps --columns 1000 ax`;
    foreach my $ps(@ps) {
	chomp $ps;
	if($ps =~ m|/usr/local/bin/readwrite| ||
           $ps =~ m|/usr/local/bin/tcaltest|  ||
	   $ps =~ m|/usr/local/bin/echo-loop|  ||
	   $ps =~ m|/usr/local/bin/echo-test|  ||
	   $ps =~ m|/bin/bash ./mjb.sh|       ||
	   $ps =~ m|/usr/local/bin/readgps|   ||
	   $ps =~ m|/usr/local/bin/moat|      ||
	   $ps =~ m|/usr/local/bin/stagedtests.pl|) {
	    my $pid = (split ' ', $ps)[0];
	    if($pid != $$) {
		print "Existing process \"$ps\"...\n";
		push @haveEm, $pid;
	    }
	}
    }
    return @haveEm;
}

sub check_for_running_processes {
    die "Existing processes would interfere; please kill before starting MOAT.\n"
	if scalar have_running_processes;
}


sub kill_running_processes {
    my @existing = have_running_processes;
    if(@existing) {
	for(@existing) {
	    print "Killing process $_...\n";
	    kill(9, $_) unless $_ == $$;
	}
	check_for_running_processes;
    } else {
	print "Nothing running to kill.\n";
    }
}    

sub get_communicating_doms {
    my %iscom_hash;
    foreach my $pf (</proc/driver/domhub/card?/pair?/dom?/is-communicating>) {
	if(`cat $pf` =~ /is communicating/) {
	    if($pf =~ m|/proc/driver/domhub/card(\d+)/pair(\d+)/dom(\w+)/is-communicating|) {
		$iscom_hash{"$1$2$3"} = 1;
	    }
	}
    }
    return %iscom_hash;
}

sub comstat { 
    my $dom = shift; return "" unless $dom =~ /(\d)(\d)(\w)/;
    my $pf = "/proc/driver/domhub/card$1/pair$2/dom$3/comstat";
    return "proc file not found!\n" unless -e $pf;
    return `cat $pf`;
}

sub fpga {
    my $dom = shift; return "" unless $dom =~ /(\d)(\d)(\w)/;
    my $pf = "/proc/driver/domhub/card$1/fpga";
    return "proc file not found!\n" unless -e $pf;
    return `cat $pf`;
}

sub allstats {
    return "" unless @_;
    my $dom = shift;
    return comstat($dom).fpga($dom)."\n\n".allstats(@_);
}

sub card_currents {
    my $lastcard;
    my $s;
    foreach my $cp (</proc/driver/domhub/card?/pair?/current>) {
	$cp =~ m|/proc/driver/domhub/card(\d)/pair(\d)/current|;
	my $card = $1;
	my $pair = $2;
	if((defined $lastcard) && $lastcard ne $card) { $s.= " mA\n"; }
	$lastcard = $card;
	my $curtext = `cat $cp`; chomp $curtext;
	$curtext = $1 if $curtext =~ /current is (\S+) mA/;
	$s .= sprintf("  $card$pair: %3s ", $curtext);
    }
    $s .= " mA\n";
}

sub do_cold_reboot_test {
    my $nboot   = shift; return 1 unless defined $nboot;
    my $bootlog = shift; return 1 unless defined $bootlog;
    my @doms    = @_; 
    open(BL, ">$bootlog") || mydie "Can't open $bootlog: $!\n";
    print BL "Will do cold reboot tests ($nboot trials)...\n";

    my $domarg;
    if(@doms < 1) {
	on_all;
	my %hash = get_communicating_doms;
	@doms = keys %hash;
	off_all;
	$domarg = "all";
    } else {
	$domarg = join " ", @doms;
    }
    print BL "Communicating DOMs: ".(join ' ', @doms)."\n";
    foreach my $trial(0..($nboot-1)) {
	print BL "Trial $trial...\n";
	print BL "Currents before pwr_on:\n".card_currents;
	on_all;

	my %thistrialcomm = get_communicating_doms;
	
	# Open each file and start select loop
	foreach my $dom(@doms) {
	    if(! $thistrialcomm{$dom}) {
		print BL "\nTrial $trial DOM $dom is NOT communicating after pwr on.\n";
		print BL comstat($dom);
		print BL fpga($dom);
		print BL "Test FAILED.\n";
		close BL;
		off_all unless $skipoff;
		return 1;
	    }
	}

	print BL "Currents after power on, before configboot->iceboot:\n".card_currents;

	my $secmd = "se.pl $domarg r r.+\\\?\\\>";
	my $seresult = `$secmd 2>&1`;
	if($seresult !~ /SUCCESS/) {
	    print BL "\nTrial $trial transition from configboot->iceboot FAILED!\n";
	    print BL $seresult;
	    print BL allstats(sort @doms);
	    print BL "Currents at time of failure:\n".card_currents;
	    print BL "Test FAILED.\n";
	    close BL;
	    off_all unless $skipoff;
	    return 1;
	}

	%thistrialcomm = get_communicating_doms;
	# Open each file and start select loop
	foreach my $dom(@doms) {
	    if(! $thistrialcomm{$dom}) {
		print BL "\nTrial $trial DOM $dom is NOT communicating after "
		    .    "configboot->iceboot.\n";
		print BL comstat($dom);
		print BL fpga($dom);
		print BL "Currents at time of failure:\n".card_currents;
		print BL "Test FAILED.\n";
		close BL;
		off_all unless $skipoff;
		return 1;
	    }
	}

	print BL "Currents after iceboot, before reading temperature:\n".card_currents;

	$secmd = "se.pl -s $domarg readTemp\\\ prtTemp "
	    .    ".+\\\?temperature:\\\ \\\(\\\\\\S+\\\ degrees\\\)";
        $seresult = `$secmd 2>&1`;
	print BL "\n$seresult";

	foreach my $dom(@doms) {
	    $dom =~ /(\d)(\d)(\w)/;
	    my $df = "/dev/dhc$1"."w$2"."d$3";
	    if($seresult !~ /$df: OK \(\S+ degrees\)./s) {
		print BL "\nTrial $trial temperature read FAILED ($dom / $df).\n";
		print BL $seresult;
		print BL allstats(sort @doms);
		print BL "Currents at time of failure:\n".card_currents;
		print BL "Test FAILED.\n";
		close BL;
		off_all unless $skipoff;
		return 1;
	    }
	}
	print BL "OK\n";
	off_all;
    }
    close BL;
    return 0;
}

__END__

