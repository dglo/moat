#!/usr/bin/perl

use strict;
use Time::Local;
use Getopt::Long;

sub usage { return <<EOF;
Usage: $0 [-v - verbose mode]
EOF
;
}
my $verbose;
GetOptions("verbose|v" => \$verbose) || die usage;

my $moatdir = shift; 
$moatdir = "latest_moat" unless defined $moatdir;
print "Analyzing $moatdir...\n";
chdir $moatdir || die "Can't CD to $moatdir: $!\n";
if( -f "SUCCESS") {
    print "SUCCESS\n";
} elsif( -f "FAIL") {
    print "FAIL\n";
} else {
    print "Run did NOT finish.\n";
}

my @tests = <test???>;
for(@tests) {
    print "Analyzing test $_\n";
    my @subtests = <$_/*>;
    for(@subtests) {
	print "$_:\n";
	if(! -f "$_/st.out") {
	    print "No st.out... stagedtests never started.\n";
	    next;
	} else {
	    my $stout = `cat $_/st.out`;
	    my $tbegin; my $tend; my $mon0; my $mon1;
            # Sun Feb 20 20:10:23 2005
	    if($stout =~ /Started run at .+? (\w+)\s+(\d+) (\d+):(\d+):(\d+) \d+\n/) {
		$mon0 = $1;
		print "Started run at $1 $2 $3 $4 $5\n";
		$tbegin = $2*86400+$3*3600+$4*60+$5;
	    } 
	    if($stout =~ /End of run at .+? (\w+)\s+(\d+) (\d+):(\d+):(\d+) \d+\./) {
		$mon1 = $1;
		print "End of run at $1 $2 $3 $4 $5\n";
		$tend = $2*86400+$3*3600+$4*60+$5;
	    }
	    die "Can't span different months (yet)!\n" unless $mon0 eq $mon1;
	    my $tdiff = $tend-$tbegin;
	    my $tmin  = $tdiff/60;
	    printf "Run duration $tdiff seconds (%2.2f minutes).\n", $tmin;
	}
	if(! -f "$_/commstats_after") {
	    print "No commstats_after... stagedtests never finished.\n";
	    if($verbose) {
		print `cat ../$moatdir/MOAT.out`;
		print "==========================\n";
		print `cat ../$moatdir/$_/st.out`;
	    } else {
		print "For details: cat $moatdir/$_/st.out\n";
	    }
	    next;
	}
	my $csafter = `cat $_/commstats_after`;
	# print $csafter;
	my @doms = split /\/dev\//, $csafter;
	my @domlist; 
	my %resent;
	my %badseq;
	my %badseq_3; # Bad seq beyond 3 pkts
	my %badpkt;
	my %badhdr;
	my %hwtouts;
	my %txbytes;
	my %rxbytes;
	my %totbadpkts;
	for(@doms) {
	    # print "+++\n$_\n---\n";
	    if(/dhc(\d+)w(\d+)d(\S)/) {
		my $card = $1;
		my $pair = $2;
		my $aorb = $3;
		my $dom  = "$card$pair$aorb";
		push @domlist, $dom;
		print "$card $pair $aorb ";
		if(/RESENT=(\d+)/) {
		    $resent{$dom} = $1;
		    print "RESENT=$1 " if $1 > 0;
		}
		if(/BADSEQ=(\d+)/) {
		    $badseq{$dom} = $1;
		    print "BADSEQ=$1 " if $1 > 0;
		    $badseq_3{$dom} = ($1 > 3 ? ($1-3) : 0);
		}
		if(/BADHDR=(\d+)/) {
		    $badhdr{$dom} = $1;
		    print "BADHDR=$1 " if $1 > 0;
		}
		if(/BADPKT=(\d+)/) {
		    $badpkt{$dom} = $1;
		    print "BADPKT=$1 " if $1 > 0;
		}
		if(/NHDWRTIMEOUTS=(\d+)/) {
		    $hwtouts{$dom} = $1;
		    print "HARDWARE TIMEOUTS=$1 " if $1 > 0;
		}
		$totbadpkts{$dom} = $badpkt{$dom}+$badhdr{$dom}+$badseq_3{$dom}+$resent{$dom};
		if($totbadpkts{$dom}) { 
		    print "($totbadpkts{$dom} bad) ";
		}
		if(/RX: (\d+)B/) {
		    $rxbytes{$dom} = $1;
		}
		if(/TX: (\d+)B/) {
                    $txbytes{$dom} = $1;
		}
		my $totbytes = $rxbytes{$dom}+$txbytes{$dom};
		my $ber;
		if($totbadpkts{$dom}==0) {
		    my $maxbiterror = 1/(8*$totbytes);
		    $ber = sprintf "BER<%2.2e", $maxbiterror;
		}
		my $totmb = $totbytes/1E6;
		printf "RX $rxbytes{$dom}B TX $txbytes{$dom}B (total %2.2f MB, $ber)\n",$totmb;
	    }
	}
    }
}

print "Done.\n";
exit;
